proxies:
  - name: 黄焖鸡
    type: vless
    server: 104.23.98.159
    port: 443
    uuid: 01001110-0100-1101-0101-001101001100
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: r.maga.dns-dynamic.net
    servername: r.maga.dns-dynamic.net
    network: ws
    ws-opts:
      headers:
        Host: r.maga.dns-dynamic.net
  - name: 西湖淫🐟006
    type: vless
    server: 62.72.166.251
    port: 8880
    uuid: 0132166f-e702-48ed-a9e7-b07af768faf8
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /Telegram@WangCai2/?ed=2560
      headers:
        Host: cf.d3z.net
  - name: 🐱2
    type: vless
    server: 104.21.40.26
    port: 443
    uuid: 049b291e-5752-448c-9b9d-92c7ea45611f
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: cvfgty.007770777.xyz
    servername: cvfgty.007770777.xyz
    client-fingerprint: chrome
    alpn:
      - http/1.1
    network: ws
    ws-opts:
      path: /IQ4tIJOrCL0mLz663
      headers:
        Host: cvfgty.007770777.xyz
  - name: 圆🚪射🐔024
    type: vless
    server: sweet-combination.seotoolsforyou.co.uk
    port: 80
    uuid: 05020a61-3c0c-4ead-b256-7851ff905a75
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 白虎
    type: vless
    server: 95.164.89.23
    port: 47422
    uuid: 0707fd52-baae-4609-bcb0-b6ace46264dc
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: http
    http-opts:
      method: GET
      path:
        - /
      headers:
        Host:
          - amirzaplus.com
  - name: 西瓜🍉018
    type: vless
    server: server1.fergalvpnmod.com
    port: 28338
    uuid: 0b9ee474-19f6-4d7f-9281-96f239e6cebc
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: MJwVQS7Qs5U_FYJn_osHZJSQ9ioxZRHC2HDPVwt7nmw
      short-id: 9ecc4615ce
    servername: cloudflare.com
    client-fingerprint: randomized
    network: grpc
    grpc-opts:
      grpc-service-name: Telegram:@FergalVpnMod
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔019
    type: vless
    server: bewildered-poem.seotoolsforyou.co.uk
    port: 80
    uuid: 0f4865d9-9405-4703-a282-46e326e6d9e7
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 黄焖鸡010
    type: vless
    server: aws-link2.liangxin1.xyz
    port: 32725
    uuid: 1aee4293-4d70-49b3-8524-839ce85db0ab
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: IdgzmrHX6nbZEVjox3WcxBE07DwXE9YIa8ZyYZuMWEw
      short-id: 784cf058
    servername: osxapps.itunes.apple.com
    client-fingerprint: chrome
    network: tcp
  - name: 圆🚪射🐔013
    type: vless
    server: wild-bird.seotoolsforyou.co.uk
    port: 80
    uuid: 1d0dfde1-9f18-4557-9af8-4f3124ee5dcd
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 🐦人006
    type: vless
    server: 104.21.25.72
    port: 443
    uuid: 1fce2673-10ee-4a13-bd1b-f4e2863ebb5c
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pPpmNBvC.006660666.xYz
    servername: pPpmNBvC.006660666.xYz
    client-fingerprint: chrome
    alpn:
      - http/1.1
    network: ws
    ws-opts:
      path: /wU3lZaUTRQTqot0LE
      headers:
        Host: pppmnbvc.006660666.xyz
  - name: 圆🚪射🐔006
    type: vless
    server: dedicated-development.seotoolsforyou.co.uk
    port: 80
    uuid: 2054405e-70ff-40a2-ae27-16b63d72390a
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 凤凰劈叉001
    type: vless
    server: 141.193.213.21
    port: 80
    uuid: 25585ad5-242d-4b58-ad50-2492ee122ab6
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
      headers:
        Host: 19.sahanwickramasinghe.shop
  - name: 蛤蜊007
    type: vless
    server: 45.130.147.60
    port: 54226
    uuid: 2885371e-adc8-4283-84f9-a08b1a7461ce
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: 1NC-IxPV2A2CsP_DWsps3Fos6mRyHjUdpqYQnSCGnUM
      short-id: 6ba85179e30d4fc2
    servername: swdist.apple.com
    client-fingerprint: chrome
    network: tcp
  - name: 圆🚪射🐔017
    type: vless
    server: handsome-device.oneeat.co
    port: 80
    uuid: 2ad87f95-7a0b-4018-8497-5ecaac2f0ddf
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 黄焖鸡🐔4
    type: vless
    server: 74.119.193.67
    port: 10088
    uuid: 2b70f40f-b236-448c-b92e-e598f025a0ed
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: enVCnAoXILJUvAvwx8GNVOImPYFm3Jo-UHYHOlbDZW4
      short-id: 63cace289fb97072
    servername: learn.microsoft.com
    client-fingerprint: chrome
    network: tcp
  - name: 圆🚪射🐔003
    type: vless
    server: ipw.gfdv54cvghhgfhgj-njhgj64.info
    port: 2096
    uuid: 337bf72e-bb79-4d5f-be3f-7822eb77100c
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: KtT44fPtXh.DaStAtSaRd.OrG
    servername: KtT44fPtXh.DaStAtSaRd.OrG
    network: ws
    ws-opts:
      path: /
      headers:
        Host: KtT44fPtXh.DaStAtSaRd.OrG
  - name: 圆🚪射🐔014
    type: vless
    server: brainy-party.seotoolsforyou.co.uk
    port: 80
    uuid: 34797f17-09a1-400c-9f4b-275718d62a0f
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔015
    type: vless
    server: beloved-failure.seotoolsforyou.co.uk
    port: 80
    uuid: 3cad733b-3526-476b-adf5-b7cbdd33dc6c
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 西湖淫🐟008
    type: vless
    server: 104.26.2.186
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: vp35.hiddendom.shop
    servername: vp35.hiddendom.shop
    alpn:
      - h2
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 🇺🇸帝国大虾8
    type: vless
    server: 104.26.3.186
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: vp33.hiddendom.shop
    servername: vp33.hiddendom.shop
    alpn:
      - h2
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 子日先曰025
    type: vless
    server: 172.67.68.36
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v2.hiddendom.shop
    servername: pqh23v2.hiddendom.shop
    alpn:
      - h2
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 甜瓜🍈014
    type: vless
    server: 45.8.211.71
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh24v3.hiddendom.shop
    servername: pqh24v3.hiddendom.shop
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 火鸡007
    type: vless
    server: 45.8.211.86
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v4.hiddendom.shop
    servername: pqh23v4.hiddendom.shop
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 水星016
    type: vless
    server: 89.116.180.248
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v4.hiddendom.shop
    servername: pqh23v4.hiddendom.shop
    alpn:
      - h2
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 甜瓜🍈007
    type: vless
    server: 92.53.188.36
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v4.hiddendom.shop
    servername: pqh23v4.hiddendom.shop
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 百步射🐦038
    type: vless
    server: 94.140.0.141
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v4.hiddendom.shop
    servername: pqh23v4.hiddendom.shop
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 红毛丹1
    type: vless
    server: 94.247.142.103
    port: 443
    uuid: 401374e6-df77-41fb-f638-dad8184f175b
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: pqh23v5.hiddendom.shop
    servername: pqh23v5.hiddendom.shop
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔016
    type: vless
    server: charming-process.seotoolsforyou.co.uk
    port: 80
    uuid: 43791e7f-8e02-4189-9533-4f842bcacd79
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔007
    type: vless
    server: hopeful-appointment.seotoolsforyou.co.uk
    port: 80
    uuid: 491e4f76-42f0-43a7-a987-25072a68d5e4
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 西湖淫🐟002
    type: vless
    server: brilliant-knowledge.seotoolsforyou.co.uk
    port: 80
    uuid: 4ad29f1b-2cea-4ddc-b856-fab1ff141ac6
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔011
    type: vless
    server: deep-radio.seotoolsforyou.co.uk
    port: 80
    uuid: 5139af95-a453-46c6-831a-a532b6b51305
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔005
    type: vless
    server: obedient-menu.seotoolsforyou.co.uk
    port: 80
    uuid: 561623c8-4983-44d3-a6ef-92b803a74ee8
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔031
    type: vless
    server: narrow-passenger.oneeat.co
    port: 80
    uuid: 5a12794b-2125-46d7-a748-927a989faa04
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔018
    type: vless
    server: informed-location.seotoolsforyou.co.uk
    port: 80
    uuid: 5c929ec5-5b1e-447a-950c-354c5d1ba1de
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 🌸花海029
    type: vless
    server: 104.21.66.157
    port: 443
    uuid: 662e38ba-8427-4955-94aa-76f5347a0ce8
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: eeEEEeR.666470.xYZ
    servername: eeEEEeR.666470.xYZ
    client-fingerprint: chrome
    alpn:
      - http/1.1
    network: ws
    ws-opts:
      path: /6DuxYMYmrGrnGKRtF5UvWyyVQu
      headers:
        Host: eeEEEeR.666470.xYZ
  - name: 麻辣小🐲虾007
    type: vless
    server: 172.67.161.129
    port: 443
    uuid: 662e38ba-8427-4955-94aa-76f5347a0ce8
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: eeEEEeR.666470.xYZ
    servername: eeEEEeR.666470.xYZ
    client-fingerprint: chrome
    alpn:
      - http/1.1
    network: ws
    ws-opts:
      path: /6DuxYMYmrGrnGKRtF5UvWyyVQu
      headers:
        Host: eeEEEeR.666470.xYZ
  - name: 圆🚪射🐔040
    type: vless
    server: 194.182.79.70
    port: 31516
    uuid: 6fc3195e-e1ad-4e1b-8552-ac88e2780364
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: tUuTbwQPiJSQXexLrOXTo6DsoOsXw_TTRSormnX8emk
      short-id: 5f3c96
    servername: sourceforge.net
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: Join-ZEDMODEON-ZEDMODEON-bia-ZEDMODEON-ZEDMODEON
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔039
    type: vless
    server: jealous-competition.seotoolsforyou.co.uk
    port: 80
    uuid: 7094df26-af60-41c4-afac-857060d1bab0
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 子日先曰019
    type: vless
    server: 185.243.51.67
    port: 21760
    uuid: 73e10f2a-bb9a-40c1-8e2c-ebfe0dac1dac
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: tcp
  - name: 凤凰劈叉003
    type: vless
    server: fbi11.wizard2shop.com
    port: 8085
    uuid: 77eb0a34-e172-48fa-8093-6c488664da44
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: tcp
  - name: 圆🚪射🐔021
    type: vless
    server: light-presence.oneeat.co
    port: 80
    uuid: 7e74ff43-3a90-48b3-8372-7d92a045c2d4
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 西湖淫🐟004
    type: vless
    server: ipw.gfdv54cvghhgfhgj-njhgj64.info
    port: 443
    uuid: 80128acc-ff7f-41fe-af34-62f4108635ca
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: 638880231667527799.madrid-prx-dnraaao.info
    servername: 638880231667527799.madrid-prx-dnraaao.info
    network: ws
    ws-opts:
      path: /jzkedews
      headers:
        Host: 638880231667527799.madrid-prx-dnraaao.info
  - name: 圆🚪射🐔010
    type: vless
    server: moody-lock.seotoolsforyou.co.uk
    port: 80
    uuid: 82cdcdf0-e772-4d9a-b0a2-d6b605572ac1
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 铁板鱿鱼16
    type: vless
    server: 194.182.79.142
    port: 11744
    uuid: 852006d4-ea05-4e34-bffc-305f8a462ce3
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: ujynIXoajPwSKKq9SSN2Gc23KEyIl51rAvsrgj1jXDE
      short-id: cb3d822354e725
    servername: sourceforge.net
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: Join-ZEDMODEON-ZEDMODEON-bia-ZEDMODEON-ZEDMODEON-ZEDMODEON-ZEDMODEON
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔022
    type: vless
    server: grumpy-building.seotoolsforyou.co.uk
    port: 80
    uuid: 935c990a-9bcc-484b-86a2-2a402f9ad1d4
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 西湖淫🐟001
    type: vless
    server: fruitful-exchange.seotoolsforyou.co.uk
    port: 80
    uuid: 9570a079-f83f-4454-88d0-884057c57a35
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 🐦人009
    type: vless
    server: api.node.snap.com.digi-gamingzone.koalavault.servers807.ir
    port: 2025
    uuid: 9705cfd1-d9b6-4d46-831e-ad06550d8e9a
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: fhNhrO00QDSDI1CBmJY8RwK9t-zFmTjERgbgqcj8NTI
      short-id: ""
    servername: journalofbigdata.springeropen.com
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: sadf2341sad
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔020
    type: vless
    server: confident-club.seotoolsforyou.co.uk
    port: 80
    uuid: 9926ee97-4398-48dd-b263-2863c62f5c41
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔023
    type: vless
    server: gleeful-error.seotoolsforyou.co.uk
    port: 80
    uuid: 9a37131b-2b68-427f-a2fc-cc7381c2d575
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 隔壁老李07
    type: vless
    server: it.panelmarzban.com
    port: 3037
    uuid: a0a3e34d-87e4-4ff3-b04a-875c85325d62
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: 21V_VkMUD2XRbyRDg7hjpblUAwxHvlLmbarATdhhJQI
      short-id: ""
    servername: refersion.com
    client-fingerprint: firefox
    network: tcp
  - name: 圆🚪射🐔049
    type: vless
    server: communal-loss.oneeat.co
    port: 80
    uuid: a2af50d9-09c7-4a44-90d0-42da35923e9e
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 百步射🐦042
    type: vless
    server: 85.208.110.203
    port: 443
    uuid: a351b0a4-6c4e-4456-8f8e-45db3fe0bcb2
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: SUP3nblQDtku381iK83Nl0YXGXJw15sZYH-ilRRssAM
      short-id: db7491a2
    servername: www.samsung.com
    client-fingerprint: firefox
    network: tcp
  - name: 西瓜🍉009
    type: vless
    server: 143.14.220.111
    port: 25888
    uuid: a4b1091c-8acc-4e8b-a173-20edf9ce2935
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: eHaAkgZIfsYhrH_0HCj07-Vbd7nrMHnnAa663_969DA
      short-id: be1be5fc
    servername: www.samsung.com
    client-fingerprint: qq
    network: tcp
  - name: 圆🚪射🐔008
    type: vless
    server: practical-complaint.seotoolsforyou.co.uk
    port: 80
    uuid: aadbf0d6-6a32-4473-8a87-5b17db90e035
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔046
    type: vless
    server: 168.100.6.3
    port: 8880
    uuid: b5441b0d-2147-4898-8a6a-9b2c87f58382
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /Telegram🇨🇳
      headers:
        Host: bitget1.asdasd.click
  - name: 凤凰劈叉010
    type: vless
    server: 190.93.246.246
    port: 8443
    uuid: b5441b0d-2147-4898-8a6a-9b2c87f58382
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: bitget1.asdasd.click
    servername: bitget1.asdasd.click
    network: ws
    ws-opts:
      path: /?ed=2560fp=chrome
      headers:
        Host: bitget1.asdasd.click
  - name: 子日先曰022
    type: vless
    server: 62.72.166.3
    port: 8880
    uuid: b5441b0d-2147-4898-8a6a-9b2c87f58382
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /Telegram🇨🇳
      headers:
        Host: bitget1.asdasd.click
  - name: 黄焖鸡004
    type: vless
    server: 104.17.169.85
    port: 2052
    uuid: b6a617b7-758e-4639-b2f4-d296c0f1b03e
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
      headers:
        Host: register.tunnelbreaking.shop
  - name: ❤️‍🔥星火003
    type: vless
    server: 104.24.158.0
    port: 2052
    uuid: b6a617b7-758e-4639-b2f4-d296c0f1b03e
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
      headers:
        Host: register.tunnelbreaking.shop
  - name: 圆🚪射🐔047
    type: vless
    server: 108.162.194.231
    port: 443
    uuid: b7f8c66b-40f0-4160-8b88-76a482e2b593
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: rs-sg4.lzjnb.shop
    servername: rs-sg4.lzjnb.shop
    client-fingerprint: chrome
    network: ws
    ws-opts:
      path: /lzj
      headers:
        Host: rs-sg4.lzjnb.shop
  - name: 水星030
    type: vless
    server: 154.94.226.83
    port: 58511
    uuid: b9c495ac-f63d-409f-8423-111fbff0aba4
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: YzYR8FqAMWqS4ihy7qPG-ljBXa8fHbb9hUyjjhj1IQo
      short-id: 03f70428572306
    servername: apple.com
    client-fingerprint: chrome
    network: tcp
  - name: 麻辣小🐲虾010
    type: vless
    server: server2.fergalvpnmod.com
    port: 25126
    uuid: bab6b157-a6e8-4756-a485-dcb4ca476eb9
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: AtKTc84OxbQltdeNKIgGRpUBmO1nKRCyqV6OuZmGIik
      short-id: 1e
    servername: cloudflare.com
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: Telegram:@FergalVpnMod
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔025
    type: vless
    server: modern-promise.seotoolsforyou.co.uk
    port: 80
    uuid: bd9b0366-e5dd-4665-bd5b-9896bc7327ae
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 火鸡002
    type: vless
    server: 194.182.79.182
    port: 29706
    uuid: c8da575a-b3ab-4949-985c-d151335b5301
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: 9EHYRTmUgCJodNs5L4wTxoxniVtvsXFonfQ1H72LqRQ
      short-id: ef8dfc4f801d89
    servername: sourceforge.net
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: Join-ZEDMODEON-ZEDMODEON-bia-ZEDMODEON-ZEDMODEON-ZEDMODEON-ZEDMODEON
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔009
    type: vless
    server: elegant-corporation.seotoolsforyou.co.uk
    port: 80
    uuid: d03d8815-a06f-408f-a62f-6c84869b96a9
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔028
    type: vless
    server: small-meal.oneeat.co
    port: 80
    uuid: d1e44075-8c92-4698-9db0-e71d7015b757
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 甜瓜🍈009
    type: vless
    server: 198.23.184.119
    port: 34045
    uuid: d8dd94fd-540e-461d-b5d4-acebef02c22a
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: cDaDzPr3PlS3NM8lreHZbdo-Mhqz8vMBzMSkHXhGIUA
      short-id: e8ab71d0
    servername: visit-this-invitation-link-to-join-tg-enkelte-notif.ekt.me
    client-fingerprint: firefox
    network: tcp
  - name: 甜瓜🍈016
    type: vless
    server: server2.fergalvpnmod.com
    port: 59365
    uuid: dc1985a0-76ce-486f-b571-4b210aadbc8c
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: AtKTc84OxbQltdeNKIgGRpUBmO1nKRCyqV6OuZmGIik
      short-id: 1e
    servername: cloudflare.com
    client-fingerprint: chrome
    network: grpc
    grpc-opts:
      grpc-service-name: Telegram:@FergalVpnMod
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔012
    type: vless
    server: famous-danger.oneeat.co
    port: 80
    uuid: ddc27bd6-6efa-47cf-8bfc-acaf973ba6b3
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 子日先曰007
    type: vless
    server: 185.231.205.231
    port: 8880
    uuid: df0680ca-e43c-498d-ed86-8e196eedd012
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 🐦人005
    type: vless
    server: 185.231.205.239
    port: 8880
    uuid: df0680ca-e43c-498d-ed86-8e196eedd012
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 甜瓜🍈017
    type: vless
    server: 185.231.205.248
    port: 8880
    uuid: df0680ca-e43c-498d-ed86-8e196eedd012
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 圆🚪射🐔034
    type: vless
    server: pqh25v7.waipdirect.shop
    port: 8880
    uuid: e4824193-4f54-453b-d037-88368e85ef0e
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: grpc
    grpc-opts:
      grpc-dial-options:
        with-insecure-skip-verify: false
  - name: 黄焖鸡009
    type: vless
    server: 47.79.37.171
    port: 8443
    uuid: e5c89c14-3de9-4716-cbc3-6eae3ebed0a2
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    reality-opts:
      public-key: xokq1PlzXfunVbdUvWKkR7DpCMsZPr8mNMl74JZMxVg
      short-id: 07204dd0
    servername: www.yahoo.com
    client-fingerprint: chrome
    network: tcp
  - name: 圆🚪射🐔032
    type: vless
    server: magical-fish.seotoolsforyou.co.uk
    port: 80
    uuid: edb4c373-ac92-4430-8f42-94439ca829b9
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔050
    type: vless
    server: enthusiastic-century.oneeat.co
    port: 80
    uuid: edc0a710-b736-455a-a9f2-d26150e624b2
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 圆🚪射🐔026
    type: vless
    server: creative-computer.oneeat.co
    port: 80
    uuid: f1fe4963-66f7-4f71-a038-9e07ea6cf20f
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /
  - name: 凤凰劈叉009
    type: vless
    server: aio.xtradata.dpdns.org
    port: 443
    uuid: f282b878-8711-45a1-8c69-5564172123c1
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    tls: true
    sni: aio.xtradata.dpdns.org
    servername: aio.xtradata.dpdns.org
    network: ws
    ws-opts:
      path: /aioproxybot/129.150.49.58-18650
      headers:
        Host: aio.xtradata.dpdns.org
  - name: 凤凰劈叉002
    type: vless
    server: aio.zipzap.biz.id
    port: 80
    uuid: f282b878-8711-45a1-8c69-5564172123c1
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /aioproxybot/146.190.192.43-80
      headers:
        Host: aio.zipzap.biz.id
  - name: 圆🚪射🐔048
    type: vless
    server: 91.193.58.100
    port: 8880
    uuid: fab7bf9c-ddb9-4563-8a04-fb01ce6c0fbf
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /TelegramU0001F1E8U0001F1F3
      headers:
        Host: sk.laoyoutiao.link
  - name: 圆🚪射🐔043
    type: vless
    server: 91.193.58.109
    port: 8880
    uuid: fab7bf9c-ddb9-4563-8a04-fb01ce6c0fbf
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /Telegram🇨🇳 @MxlShare @WangCai2 /
      headers:
        Host: sk.laoyoutiao.link
  - name: 子曰：先日005
    type: vless
    server: 91.193.58.179
    port: 8880
    uuid: fab7bf9c-ddb9-4563-8a04-fb01ce6c0fbf
    encryption: none
    udp: true
    skip-cert-verify: false
    tfo: false
    tls: false
    network: ws
    ws-opts:
      path: /Telegram
      headers:
        Host: sk.laoyoutiao.link
  - name: ❤️‍🔥星火009
    type: vless
    server: 89.23.108.188
    port: 443
    uuid: fe1888f8-2361-11f0-9970-45e1d80c4039
    encryption: none
    udp: true
    skip-cert-verify: true
    tfo: false
    flow: xtls-rprx-vision
    tls: true
    reality-opts:
      public-key: nm1ZhMktJbHTcJv0gqV8l0s_c9BWfQe5d02qhpSkKWo
      short-id: 7fd4
    servername: images.apple.com
    client-fingerprint: chrome
    network: tcp
  - alpn:
      - http/1.1
    client-fingerprint: chrome
    name: 🇺🇸US_8 |2.8MB/s
    network: ws
    port: 443
    server: 172.67.135.37
    tls: true
    type: vless
    udp: true
    uuid: cf8c791e-9d0b-4e90-aaf6-41ac62468416
    ws-opts:
      headers:
        Host: iiiiiiiiiiiio.459.pp.ua
        User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML,
          like Gecko) Chrome/70.0.3538.102 Safari/537.36
      path: /dtBdvnoJO8180gomOew3d
    xudp: true
    servername: IiIIIiiIIIiiO.459.pp.uA
  - alpn:
      - http/1.1
    client-fingerprint: chrome
    name: 🇺🇸US_9 |3.3MB/s
    network: ws
    port: 443
    server: 172.67.212.82
    tls: true
    type: vless
    udp: true
    uuid: 4174b95d-115e-4d39-add6-1f8db95bb860
    ws-opts:
      headers:
        Host: ddddddccccccccccccccvv.131.pp.ua
        User-Agent: Mozilla/5.0 (Windows NT 5.1; Win64; x64) AppleWebKit/537.36 (KHTML,
          like Gecko) Chrome/55.0.2883.87 Safari/537.36
      path: /eAbAcRHV1QuhyXWGxgFnoFPw1
    xudp: true
    servername: ddddddccccccccccccccvv.131.pp.ua
  - alpn:
      - http/1.1
    client-fingerprint: chrome
    name: 🇺🇸US_10 |2.4MB/s
    network: ws
    port: 443
    server: 104.21.26.17
    tls: true
    type: vless
    udp: true
    uuid: cf8c791e-9d0b-4e90-aaf6-41ac62468416
    ws-opts:
      headers:
        Host: iiiiiiiiiiiio.459.pp.ua
        User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML,
          like Gecko) Chrome/62.0.3202.94 Safari/537.36
      path: /dtBdvnoJO8180gomOew3d
    xudp: true
    servername: IiIIIiiIIIiiO.459.pp.uA
  - type: vless
    url: vless://fdd2d176-2602-46f2-b694-ce247de88b22@185.22.155.105:62750?security=reality&type=tcp&alpn=h3&allowInsecure=1&sni=www.paypal.com&fp=chrome&flow=xtls-rprx-vision&pbk=_E_YXE_gOkDrffe4t6gcajtnjFZAJ3g7ZwTJbL3IOHA#%F0%9F%87%B7%F0%9F%87%BA%20%E4%BF%84%E7%BD%97%E6%96%AF%20%E6%B3%BD%E5%88%97%E8%AF%BA%E6%A0%BC%E5%8B%92%2002
    protocol: vless
    originalUrl: vless://fdd2d176-2602-46f2-b694-ce247de88b22@185.22.155.105:62750?security=reality&type=tcp&alpn=h3&allowInsecure=1&sni=www.paypal.com&fp=chrome&flow=xtls-rprx-vision&pbk=_E_YXE_gOkDrffe4t6gcajtnjFZAJ3g7ZwTJbL3IOHA#%F0%9F%87%B7%F0%9F%87%BA%20%E4%BF%84%E7%BD%97%E6%96%AF%20%E6%B3%BD%E5%88%97%E8%AF%BA%E6%A0%BC%E5%8B%92%2002
  - type: vless
    url: vless://c643de0a-9678-4c18-9f55-58620425bac0@108.181.3.68:51499?security=reality&type=tcp&alpn=h3&allowInsecure=1&sni=aws.amazon.com&fp=chrome&flow=xtls-rprx-vision&pbk=S4-VtlwDUlz7CbSlpf8mqD4ejRWFOISwCXqdtm3JCww#%F0%9F%87%BA%F0%9F%87%B8%20%E7%BE%8E%E5%9B%BD%20%E6%B4%9B%E6%9D%89%E7%9F%B6%2004
    protocol: vless
    originalUrl: vless://c643de0a-9678-4c18-9f55-58620425bac0@108.181.3.68:51499?security=reality&type=tcp&alpn=h3&allowInsecure=1&sni=aws.amazon.com&fp=chrome&flow=xtls-rprx-vision&pbk=S4-VtlwDUlz7CbSlpf8mqD4ejRWFOISwCXqdtm3JCww#%F0%9F%87%BA%F0%9F%87%B8%20%E7%BE%8E%E5%9B%BD%20%E6%B4%9B%E6%9D%89%E7%9F%B6%2004
